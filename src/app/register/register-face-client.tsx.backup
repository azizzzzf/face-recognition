'use client';

import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import NextImage from 'next/image';
import * as faceapi from '@vladmandic/face-api';
import { LoadingSpinner } from '@/components/LoadingSpinner';
import { MultiAngleCapture } from '@/components/MultiAngleCapture';
import { ImageUpload } from '@/components/ImageUpload';
import { Camera, Upload, Check, AlertCircle, RotateCcw } from 'lucide-react';

interface FormData {
  name: string;
}

type RegistrationStatus = 'idle' | 'capturing' | 'processing' | 'success' | 'error';
type CaptureMode = 'camera' | 'upload';

export default function RegisterFaceClient() {
  const [isModelLoaded, setIsModelLoaded] = useState(false);
  const [registrationStatus, setRegistrationStatus] = useState<RegistrationStatus>('idle');
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [capturedImages, setCapturedImages] = useState<string[]>([]);
  const [showRegistrationForm, setShowRegistrationForm] = useState(false);
  const [captureMode, setCaptureMode] = useState<CaptureMode>('camera');
  
  const { register, handleSubmit, formState: { errors }, reset, watch } = useForm<FormData>();
  const nameValue = watch('name');
  
  // Load face-api.js models
  useEffect(() => {
    const loadModels = async () => {
      try {
        const MODEL_URL = '/models';
        
        await faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL);
        await faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL);
        await faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL);
        
        setIsModelLoaded(true);
      } catch (error) {
        console.error('Failed to load models:', error);
        setErrorMessage('Gagal memuat model deteksi wajah. Silakan muat ulang halaman.');
      }
    };
    
    loadModels();
  }, []);

  // Convert base64 image to image element for face-api processing
  const base64ToImage = (base64: string): Promise<HTMLImageElement> => {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.onload = () => resolve(img);
      img.onerror = reject;
      img.src = base64;
    });
  };

  // Extract face descriptor from base64 image using face-api.js
  const extractFaceDescriptor = async (base64Image: string): Promise<Float32Array | null> => {
    try {
      const img = await base64ToImage(base64Image);
      
      const detection = await faceapi
        .detectSingleFace(img, new faceapi.TinyFaceDetectorOptions())
        .withFaceLandmarks()
        .withFaceDescriptor();
      
      return detection ? detection.descriptor : null;
    } catch (error) {
      console.error('Error extracting face descriptor:', error);
      return null;
    }
  };

  // Process multiple images and get average descriptor
  const processMultipleImages = async (images: string[]): Promise<Float32Array | null> => {
    const descriptors: Float32Array[] = [];
    
    console.log('Processing', images.length, 'images for face descriptors');
    
    for (let i = 0; i < images.length; i++) {
      const image = images[i];
      console.log(`Processing image ${i + 1}/${images.length}`);
      
      const descriptor = await extractFaceDescriptor(image);
      if (descriptor) {
        descriptors.push(descriptor);
        console.log(`Successfully extracted descriptor from image ${i + 1}, length:`, descriptor.length);
      } else {
        console.warn(`Failed to extract descriptor from image ${i + 1}`);
      }
    }
    
    console.log(`Total descriptors extracted: ${descriptors.length}/${images.length}`);
    
    if (descriptors.length === 0) {
      console.error('No face descriptors could be extracted from any image');
      return null;
    }
    
    // Calculate average descriptor
    const avgDescriptor = new Float32Array(descriptors[0].length);
    for (let i = 0; i < avgDescriptor.length; i++) {
      let sum = 0;
      for (const descriptor of descriptors) {
        sum += descriptor[i];
      }
      avgDescriptor[i] = sum / descriptors.length;
    }
    
    console.log('Average descriptor calculated, length:', avgDescriptor.length);
    return avgDescriptor;
  };

  // Handle capture completion from MultiAngleCapture
  const handleCaptureComplete = (images: string[]) => {
    setCapturedImages(images);
    setShowRegistrationForm(true);
  };


  // Handle image upload completion from ImageUpload
  const handleUploadComplete = (images: string[]) => {
    setCapturedImages(images);
    setShowRegistrationForm(true);
  };

  // Handle registration form submission
  const onSubmit = async (data: FormData) => {
    if (capturedImages.length === 0) {
      setErrorMessage('Tidak ada gambar untuk diproses.');
      return;
    }

    setRegistrationStatus('processing');
    setErrorMessage(null);
    setSuccessMessage(null);

    try {
      // Process images with face-api.js
      const faceDescriptor = await processMultipleImages(capturedImages);
      
      if (!faceDescriptor) {
        throw new Error('Tidak dapat mendeteksi wajah pada gambar. Pastikan wajah terlihat jelas dan coba lagi.');
      }

      // Ensure descriptor is properly converted to array
      const descriptorArray = Array.from(faceDescriptor);
      
      if (!descriptorArray || descriptorArray.length === 0) {
        throw new Error('Gagal mengekstrak descriptor wajah. Silakan coba lagi.');
      }

      console.log('Face descriptor extracted:', {
        descriptorLength: descriptorArray.length,
        descriptorType: typeof descriptorArray,
        isArray: Array.isArray(descriptorArray),
        firstFewValues: descriptorArray.slice(0, 5)
      });

      // Prepare unified registration data for single API call
      const registrationData = {
        name: data.name,
        descriptor: descriptorArray, // Face-API descriptor
        enrollmentImages: capturedImages,
        multiAngle: true
      };

      // Single unified registration call
      console.log('Sending registration request:', {
        name: registrationData.name,
        descriptorLength: registrationData.descriptor.length,
        descriptorType: typeof registrationData.descriptor,
        isArray: Array.isArray(registrationData.descriptor),
        imagesCount: registrationData.enrollmentImages.length,
        multiAngle: registrationData.multiAngle
      });

      const response = await fetch('/api/register-face', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(registrationData),
      });

      const result = await response.json();
      
      console.log('Registration API Response:', {
        status: response.status,
        ok: response.ok,
        result: result
      });
      
      if (!response.ok) {
        console.error('Registration API Error Details:', result);
        
        // Handle specific error cases
        if (response.status === 409) {
          // Duplicate user error
          throw new Error(result.details || 'Pengguna dengan nama tersebut sudah terdaftar. Silakan gunakan nama yang berbeda.');
        } else if (result.details) {
          // Server provided detailed error message
          throw new Error(result.details);
        } else {
          // Generic error
          throw new Error(result.error || `HTTP ${response.status}: ${response.statusText}`);
        }
      }
      
      setRegistrationStatus('success');
      // Show success message based on ArcFace processing result
      if (result.arcfaceEnabled) {
        setSuccessMessage(`Berhasil mendaftarkan wajah untuk ${data.name} dengan dukungan penuh sistem (Face-API + ArcFace)!`);
      } else {
        setSuccessMessage(`Berhasil mendaftarkan wajah untuk ${data.name} dengan Face-API! (ArcFace akan diproses di background)`);
      }
      
      // Reset form and images after successful registration
      setTimeout(() => {
        handleReset();
      }, 3000);

    } catch (error) {
      console.error('Registration error:', error);
      setRegistrationStatus('error');
      setErrorMessage(error instanceof Error ? error.message : 'Terjadi kesalahan saat mendaftarkan wajah');
    }
  };

  // Reset form and captured images
  const handleReset = () => {
    setCapturedImages([]);
    setShowRegistrationForm(false);
    setRegistrationStatus('idle');
    setErrorMessage(null);
    setSuccessMessage(null);
    reset();
  };

  if (!isModelLoaded) {
    return (
      <div className="min-h-screen flex items-center justify-center p-6 bg-gray-50">
        <div className="bg-white rounded-xl p-8 max-w-md w-full">
          <div className="text-center space-y-4">
            <LoadingSpinner size="lg" />
            <div>
              <h3 className="text-lg font-semibold text-gray-900">Memuat AI Engine</h3>
              <p className="text-sm text-gray-600 mt-1">Menginisialisasi model deteksi wajah...</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Alerts */}
      {errorMessage && (
        <div className="bg-red-50 border border-red-200 rounded-md p-4 m-6">
          <div className="flex">
            <AlertCircle className="h-5 w-5 text-red-400" />
            <div className="ml-3">
              <p className="text-sm text-red-800">{errorMessage}</p>
            </div>
          </div>
        </div>
      )}
      
      {successMessage && (
        <div className="bg-green-50 border border-green-200 rounded-md p-4 m-6">
          <div className="flex">
            <Check className="h-5 w-5 text-green-400" />
            <div className="ml-3">
              <p className="text-sm text-green-800">{successMessage}</p>
            </div>
          </div>
        </div>
      )}

      {!showRegistrationForm ? (
        // Two-panel layout matching reference design exactly
        <div className="flex h-screen overflow-hidden">
          
          {/* LEFT PANEL - Camera (75% width to match reference) */}
          <div className="flex-1" style={{ flex: '0 0 75%' }}>
            <div className="bg-white h-full">
              {/* Camera Area - Full height with rounded corners on content */}
              <div className="h-full p-6">
                <div className="h-full bg-white rounded-xl overflow-hidden relative">
                  {captureMode === 'camera' ? (
                    <div className="w-full h-full relative">
                      <MultiAngleCapture
                        onCaptureComplete={handleCaptureComplete}
                        isCapturing={registrationStatus === 'capturing'}
                      />
                    </div>
                  ) : (
                    <div className="flex-1 flex items-center justify-center p-8">
                      <ImageUpload onUploadComplete={handleUploadComplete} />
                    </div>
                  )}
                  
                  {/* The MultiAngleCapture component handles its own capture controls */}
                </div>
              </div>
            </div>
          </div>

          {/* RIGHT PANEL - Controls (25% width to match reference) */}
          <div style={{ flex: '0 0 25%', backgroundColor: '#F8F9FA' }}>
            <div className="h-full flex flex-col">
              
              {/* Control Panel Header - Clean without underlines */}
              <div className="px-6 py-4 bg-white">
                <h2 className="text-lg font-semibold text-gray-900">Kontrol Kamera</h2>
                <p className="text-sm text-gray-600 mt-1">Pilih metode pengambilan foto</p>
              </div>

              <div className="flex-1 p-6 space-y-6">
                {/* Segmented Control - matches reference design */}
                <div className="space-y-3">
                  <div className="flex bg-gray-100 rounded-lg p-1">
                    <button
                      onClick={() => setCaptureMode('camera')}
                      className={`flex-1 flex items-center justify-center gap-2 py-2.5 px-4 rounded-md text-sm font-medium transition-all ${
                        captureMode === 'camera'
                          ? 'bg-white text-gray-900 shadow-sm'
                          : 'text-gray-600 hover:text-gray-900'
                      }`}
                    >
                      <Camera className="h-4 w-4" />
                      Camera
                    </button>
                    <button
                      onClick={() => setCaptureMode('upload')}
                      className={`flex-1 flex items-center justify-center gap-2 py-2.5 px-4 rounded-md text-sm font-medium transition-all ${
                        captureMode === 'upload'
                          ? 'bg-white text-gray-900 shadow-sm'
                          : 'text-gray-600 hover:text-gray-900'
                      }`}
                    >
                      <Upload className="h-4 w-4" />
                      Upload
                    </button>
                  </div>
                </div>

                {/* Instructions Panel - matches reference exactly */}
                <div className="bg-blue-50 rounded-lg p-4">
                  <div className="flex items-center gap-2 mb-3">
                    <div className="w-5 h-5 rounded-full bg-blue-500 flex items-center justify-center">
                      <span className="text-white text-xs font-semibold">?</span>
                    </div>
                    <h4 className="font-semibold text-blue-900 text-sm">Panduan Foto</h4>
                  </div>
                  <ul className="text-sm text-blue-800 space-y-2.5">
                    <li className="flex items-start gap-3">
                      <div className="w-1.5 h-1.5 rounded-full bg-blue-500 mt-2 flex-shrink-0"></div>
                      <span>Sistem akan mengambil 10 foto dengan angle berbeda</span>
                    </li>
                    <li className="flex items-start gap-3">
                      <div className="w-1.5 h-1.5 rounded-full bg-blue-500 mt-2 flex-shrink-0"></div>
                      <span>Ikuti instruksi posisi untuk setiap foto</span>
                    </li>
                    <li className="flex items-start gap-3">
                      <div className="w-1.5 h-1.5 rounded-full bg-blue-500 mt-2 flex-shrink-0"></div>
                      <span>Posisikan wajah di dalam lingkaran panduan</span>
                    </li>
                    <li className="flex items-start gap-3">
                      <div className="w-1.5 h-1.5 rounded-full bg-blue-500 mt-2 flex-shrink-0"></div>
                      <span>Wajah terlihat jelas dan pencahayaan cukup</span>
                    </li>
                    <li className="flex items-start gap-3">
                      <div className="w-1.5 h-1.5 rounded-full bg-blue-500 mt-2 flex-shrink-0"></div>
                      <span>Bersiap saat muncul instruksi angle</span>
                    </li>
                  </ul>
                </div>

                {/* Preview Images */}
                {capturedImages.length > 0 && (
                  <div className="bg-white rounded-lg p-4">
                    <h4 className="text-sm font-semibold text-gray-800 mb-3">Preview ({capturedImages.length} foto)</h4>
                    <div className="grid grid-cols-2 gap-2">
                      {capturedImages.slice(0, 4).map((image, index) => (
                        <div key={index} className="aspect-square rounded-lg bg-gray-100 relative overflow-hidden">
                          <NextImage 
                            src={image} 
                            alt={`Foto ${index + 1}`} 
                            fill
                            className="object-cover"
                            unoptimized={true}
                          />
                        </div>
                      ))}
                    </div>
                    {capturedImages.length > 4 && (
                      <p className="text-xs text-gray-500 mt-2 text-center">+{capturedImages.length - 4} foto lainnya</p>
                    )}
                  </div>
                )}
              </div>

              {/* Bottom Status Section - matches reference design without borders */}
              <div className="px-6 py-4 bg-white">
                <div className="bg-gray-50 rounded-lg p-4">
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <p className="text-xs font-semibold text-gray-600 mb-1">Status Sistem</p>
                      <p className="text-sm font-semibold text-gray-900">
                        {registrationStatus === 'capturing' ? 'Mengambil foto...' :
                         registrationStatus === 'processing' ? 'Memproses...' :
                         registrationStatus === 'success' ? 'Berhasil!' :
                         registrationStatus === 'error' ? 'Error' :
                         'Siap untuk foto'}
                      </p>
                    </div>
                    <div 
                      className={`w-3 h-3 rounded-full ${
                        registrationStatus === 'capturing' || registrationStatus === 'processing' 
                          ? 'bg-yellow-400' 
                          : registrationStatus === 'success' ? 'bg-green-400'
                          : registrationStatus === 'error' ? 'bg-red-400'
                          : 'bg-blue-500'
                      }`}
                    ></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          </div>
        </div>
      ) : (
        // REGISTRATION FORM - Modal Overlay
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl shadow-xl w-full max-w-md">
            <div className="p-6">
              <div className="text-center mb-6">
                <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3">
                  <Check className="w-6 h-6 text-green-600" />
                </div>
                <h2 className="text-xl font-medium text-gray-900 mb-2">Foto Berhasil Diambil</h2>
                <p className="text-sm text-gray-600">Masukkan nama untuk melengkapi registrasi</p>
              </div>

              <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                <div>
                  <input
                    {...register('name', { 
                      required: 'Nama harus diisi',
                      minLength: { value: 2, message: 'Nama minimal 2 karakter' }
                    })}
                    placeholder="Masukkan nama lengkap"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none"
                    onFocus={(e) => {
                      e.target.style.borderColor = '#007AFF';
                      e.target.style.boxShadow = '0 0 0 2px rgba(0, 122, 255, 0.2)';
                    }}
                    onBlur={(e) => {
                      e.target.style.borderColor = '#d1d5db';
                      e.target.style.boxShadow = 'none';
                    }}
                    disabled={registrationStatus === 'processing'}
                  />
                  {errors.name && (
                    <p className="text-sm text-red-600 mt-1">{errors.name.message}</p>
                  )}
                </div>

                <div className="flex gap-3 pt-2">
                  <button
                    type="button"
                    onClick={handleReset}
                    disabled={registrationStatus === 'processing'}
                    className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
                  >
                    <RotateCcw className="w-4 h-4" />
                    Ambil Ulang
                  </button>
                  <button
                    type="submit"
                    disabled={registrationStatus === 'processing' || !nameValue}
                    className="flex-1 px-4 py-2 text-white rounded-md disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
                    style={{ backgroundColor: '#007AFF' }}
                  >
                    {registrationStatus === 'processing' ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        Memproses...
                      </>
                    ) : (
                      <>
                        <Check className="w-4 h-4" />
                        Daftar
                      </>
                    )}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
