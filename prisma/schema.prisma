// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  name       String
  role       Role     @default(USER)
  supabaseId String   @unique @map("supabase_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  
  // Relations
  knownFaces  KnownFace[]
  attendances Attendance[]

  @@map("users")
}

model KnownFace {
  id                 String       @id @default(uuid())
  name               String
  faceApiDescriptor  Float[]      @default([]) @map("face_api_descriptor")
  enrollmentImages   Json         @default("[]") @map("enrollment_images") // Store multiple angle images
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @default(now()) @updatedAt @map("updated_at")
  
  // User relation
  userId             String?
  user               User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  Attendance         Attendance[]

  @@map("known_faces")
}

model Attendance {
  id         BigInt    @id @default(autoincrement())
  face       KnownFace @relation(fields: [faceId], references: [id], onDelete: Cascade)
  faceId     String
  createdAt  DateTime  @default(now()) @map("created_at")
  
  // User relation
  userId     String?
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("attendance")
}

