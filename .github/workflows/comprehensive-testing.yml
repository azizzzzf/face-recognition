name: 🧪 Comprehensive Testing Suite

on:
  push:
    branches: [ main, develop, face-recognition ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: false
        default: 'basic'
        type: choice
        options:
        - basic
        - all
        - smoke
        - unit
        - integration

env:
  NODE_VERSION: '20'
  CI: true
  FORCE_COLOR: 1
  # Test environment variables
  NODE_ENV: test
  NEXT_PUBLIC_APP_ENV: test
  TEST_BASE_URL: http://localhost:3000
  HEADLESS: true

jobs:
  setup:
    name: 🔧 Setup & Environment Check
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          if npm run test:setup; then
            echo "✅ Test setup completed"
          else
            echo "⚠️ Test setup failed, continuing with basic setup"
            # Create basic directories needed for testing
            mkdir -p tests/reports/html tests/reports/json tests/reports/coverage
            mkdir -p tests/fixtures/images tests/fixtures/data tests/fixtures/files
          fi

      - name: Verify basic functionality
        run: |
          echo "🔧 Checking basic functionality..."
          if npm run test:smoke; then
            echo "✅ Smoke tests passed"
          else
            echo "⚠️ Smoke tests not available or failed"
          fi

      - name: Generate test matrix
        id: set-matrix
        run: |
          case "${{ github.event.inputs.test_type }}" in
            "all")
              echo "matrix=[\"smoke\",\"unit\",\"integration\"]" >> $GITHUB_OUTPUT
              ;;
            "basic"|"")
              echo "matrix=[\"smoke\",\"unit\"]" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "matrix=[\"${{ github.event.inputs.test_type }}\"]" >> $GITHUB_OUTPUT
              ;;
          esac

  smoke-tests:
    name: 💨 Smoke Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.matrix, 'smoke')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test directories
        run: |
          mkdir -p tests/reports/html tests/reports/json
          mkdir -p tests/fixtures/images tests/fixtures/data

      - name: Run smoke tests
        run: |
          if npm run test:smoke; then
            echo "✅ Smoke tests completed successfully"
          else
            echo "❌ Smoke tests failed"
            exit 1
          fi
        timeout-minutes: 5

      - name: Upload smoke test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results
          path: tests/reports/
          retention-days: 7

  unit-tests:
    name: 🧩 Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.matrix, 'unit')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test directories
        run: |
          mkdir -p tests/reports/coverage tests/reports/html tests/reports/json
          mkdir -p tests/fixtures/images tests/fixtures/data

      - name: Run unit tests
        run: |
          if npm run test:unit; then
            echo "✅ Unit tests completed successfully"
          else
            echo "❌ Unit tests failed"
            exit 1
          fi
        timeout-minutes: 10

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: tests/reports/
          retention-days: 7

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.matrix, 'integration')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test directories
        run: |
          mkdir -p tests/reports/html tests/reports/json
          mkdir -p tests/fixtures/images tests/fixtures/data

      - name: Run integration tests
        run: |
          if npm run test:integration; then
            echo "✅ Integration tests completed successfully"
          else
            echo "⚠️ Integration tests failed or not available"
            echo "This is expected if database is not set up"
          fi
        timeout-minutes: 10
        continue-on-error: true

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: tests/reports/
          retention-days: 7

  test-summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    needs: [setup, smoke-tests, unit-tests, integration-tests]
    if: always()
    steps:
      - name: Generate test summary
        run: |
          echo "## 🧪 Comprehensive Testing Results"
          echo ""
          
          echo "### Job Status Summary"
          echo "| Test Type | Status |"
          echo "|-----------|--------|"
          
          if [ "${{ needs.setup.result }}" == "success" ]; then
            echo "| Setup | ✅ PASSED |"
          else
            echo "| Setup | ❌ FAILED |"
          fi
          
          if [ "${{ needs.smoke-tests.result }}" == "success" ]; then
            echo "| Smoke Tests | ✅ PASSED |"
          elif [ "${{ needs.smoke-tests.result }}" == "skipped" ]; then
            echo "| Smoke Tests | ⏭️ SKIPPED |"
          else
            echo "| Smoke Tests | ❌ FAILED |"
          fi
          
          if [ "${{ needs.unit-tests.result }}" == "success" ]; then
            echo "| Unit Tests | ✅ PASSED |"
          elif [ "${{ needs.unit-tests.result }}" == "skipped" ]; then
            echo "| Unit Tests | ⏭️ SKIPPED |"
          else
            echo "| Unit Tests | ❌ FAILED |"
          fi
          
          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "| Integration Tests | ✅ PASSED |"
          elif [ "${{ needs.integration-tests.result }}" == "skipped" ]; then
            echo "| Integration Tests | ⏭️ SKIPPED |"
          else
            echo "| Integration Tests | ⚠️ FAILED (Expected) |"
          fi
          
          echo ""
          echo "### Overall Result"
          
          if [ "${{ needs.setup.result }}" == "success" ] && \
             ([ "${{ needs.smoke-tests.result }}" == "success" ] || [ "${{ needs.smoke-tests.result }}" == "skipped" ]) && \
             ([ "${{ needs.unit-tests.result }}" == "success" ] || [ "${{ needs.unit-tests.result }}" == "skipped" ]); then
            echo "🎉 **Core tests passed!** Essential functionality is working."
            exit 0
          else
            echo "⚠️ **Some core tests failed.** Please check the failed jobs above."
            exit 1
          fi