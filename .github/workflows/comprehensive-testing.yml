name: 🧪 Comprehensive Testing Suite

on:
  push:
    branches: [ main, develop, face-recognition ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - smoke
        - unit
        - integration
        - e2e
        - blackbox
        - security
        - performance

env:
  NODE_VERSION: '20'
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: face_recognition_test
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/face_recognition_test
  TEST_BASE_URL: http://localhost:3000
  HEADLESS: true

jobs:
  setup:
    name: 🔧 Setup & Environment Check
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: npm run test:setup

      - name: Generate test matrix
        id: set-matrix
        run: |
          if [ "${{ github.event.inputs.test_type }}" = "all" ] || [ "${{ github.event.inputs.test_type }}" = "" ]; then
            echo "matrix=[\"smoke\",\"unit\",\"integration\",\"e2e\",\"blackbox\",\"security\",\"performance\"]" >> $GITHUB_OUTPUT
          else
            echo "matrix=[\"${{ github.event.inputs.test_type }}\"]" >> $GITHUB_OUTPUT
          fi

  smoke-tests:
    name: 💨 Smoke Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.matrix, 'smoke')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: npm run test:setup

      - name: Start PostgreSQL
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '14'
          postgresql password: ${{ env.POSTGRES_PASSWORD }}
          postgresql db: ${{ env.POSTGRES_DB }}

      - name: Run database migrations
        run: |
          npm run db:generate
          npm run db:push
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run smoke tests
        run: npm run test:smoke
        timeout-minutes: 10

      - name: Upload smoke test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results
          path: tests/reports/
          retention-days: 30

  unit-tests:
    name: 🧩 Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.matrix, 'unit')
    strategy:
      matrix:
        node-version: [18, 20]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: npm run test:setup

      - name: Run unit tests with coverage
        run: npm run test:unit
        timeout-minutes: 20

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: tests/reports/coverage/lcov.info
          flags: unit
          name: unit-tests-node-${{ matrix.node-version }}

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-node-${{ matrix.node-version }}
          path: tests/reports/
          retention-days: 30

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.matrix, 'integration')
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: npm run test:setup

      - name: Setup database
        run: |
          npm run db:generate
          npm run db:push
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run integration tests
        run: npm run test:integration
        timeout-minutes: 25
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: tests/reports/
          retention-days: 30

  e2e-tests:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.matrix, 'e2e')
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: npm run test:setup

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Setup database
        run: |
          npm run db:generate
          npm run db:push
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Start application
        run: npm start &
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Wait for application
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 2; done'

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        timeout-minutes: 30

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: |
            test-results/
            tests/reports/
          retention-days: 30

  blackbox-tests:
    name: 📦 Blackbox Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.matrix, 'blackbox')
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: npm run test:setup

      - name: Setup database
        run: |
          npm run db:generate
          npm run db:push
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Build and start application
        run: |
          npm run build
          npm start &
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Wait for application
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 2; done'

      - name: Run blackbox tests
        run: npm run test:blackbox
        timeout-minutes: 40
        env:
          HEADLESS: true

      - name: Upload blackbox test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: blackbox-test-results
          path: tests/reports/
          retention-days: 30

  security-tests:
    name: 🛡️ Security Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.matrix, 'security')
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: npm run test:setup

      - name: Setup database
        run: |
          npm run db:generate
          npm run db:push
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Build and start application
        run: |
          npm run build
          npm start &
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Wait for application
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 2; done'

      - name: Run security tests
        run: npm run test:security
        timeout-minutes: 35
        env:
          HEADLESS: true

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: tests/reports/
          retention-days: 30

  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.matrix, 'performance')
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: npm run test:setup

      - name: Setup database
        run: |
          npm run db:generate
          npm run db:push
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Build application (optimized)
        run: npm run build
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NODE_ENV: production

      - name: Start application
        run: npm start &
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NODE_ENV: production

      - name: Wait for application
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 2; done'

      - name: Run performance tests
        run: npm run test:performance
        timeout-minutes: 45

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: tests/reports/
          retention-days: 30

  report-generation:
    name: 📊 Generate Comprehensive Reports
    runs-on: ubuntu-latest
    needs: [smoke-tests, unit-tests, integration-tests, e2e-tests, blackbox-tests, security-tests, performance-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: tests/reports/artifacts/

      - name: Consolidate test results
        run: |
          # Move all artifacts to reports directory
          find tests/reports/artifacts/ -name "*.json" -exec cp {} tests/reports/json/ \; 2>/dev/null || true
          find tests/reports/artifacts/ -name "*.html" -exec cp {} tests/reports/html/ \; 2>/dev/null || true
          find tests/reports/artifacts/ -name "*.xml" -exec cp {} tests/reports/ \; 2>/dev/null || true

      - name: Generate comprehensive reports
        run: npm run test:reports

      - name: Upload comprehensive reports
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-reports
          path: tests/reports/
          retention-days: 90

      - name: Comment on PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'tests/reports/json/test-summary-latest.json';
            
            if (fs.existsSync(path)) {
              const summary = JSON.parse(fs.readFileSync(path, 'utf8'));
              
              const comment = `
              ## 🧪 Test Results Summary
              
              | Metric | Value |
              |--------|-------|
              | **Total Tests** | ${summary.totalTests} |
              | **Passed** | ${summary.passed} ✅ |
              | **Failed** | ${summary.failed} ❌ |
              | **Pass Rate** | ${summary.passRate}% |
              | **Execution Time** | ${Math.round(summary.executionTime / 1000)}s |
              
              ### 📋 Category Breakdown
              ${Object.entries(summary.categories).map(([cat, stats]) => 
                `- **${cat}**: ${stats.passed || 0}/${stats.totalTests || stats.total || 0} (${stats.totalTests > 0 ? ((stats.passed / stats.totalTests) * 100).toFixed(1) : 0}%)`
              ).join('\n')}
              
              [View detailed reports](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  notification:
    name: 📱 Test Notification
    runs-on: ubuntu-latest
    needs: [report-generation]
    if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Notify on completion
        run: |
          echo "🎉 Comprehensive testing pipeline completed!"
          echo "📊 Check the artifacts for detailed reports"
          echo "🔍 Results available in the Actions summary"